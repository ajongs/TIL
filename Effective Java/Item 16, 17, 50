오늘 배운거

불변 클래스 : 인스턴스의 내부 값(상태) 수정 불가
대표적으로 String, BigInteger, BigDecimal 등이 있음

이점
1. 객체를 다시 생성 안해도댐 ( 정적 팩터리의 이점과 동일)
2. race condition같은것 혹은 동시성에 대해서 굉장히 자유롭다 왜? immutable 하니까
3. 불변 객체는 공유 자유로움 왜? (thread safe)
4. 다른 이유가 없으면 클래스는 불변으로 만드는 것이 좋다.

String 복사 생성자는 잘 못 만들어진거 되도록 사용 지양

불변 클래스의 조건 5가지

1. 객체의 상태(변수)를 변경하는 메서드를 제공하지 않는다.(setter)
2. 모든 필드는 final
3. 모든 필드는 private
4. 클래스를 확장(상속)할 수 없게 막는다 -> 하위 클래스가 불변성을 깨뜨릴 수 있음
5. 자신 외에는 가변 컴포넌트에 접근할 수 없도록 한다. -> 클라이언트가 가변 컴포넌트를 변경시키면 클래스의 불변성이 깨짐
가변 컴포넌트(객체 참조), 참조값 리턴

방어적 복사본 
결국 불변 클래스를 위한 것
이걸 해야하는 이유? 
불변 클래스나 가변 클래스에 참조 변수(가변 변수)를 가지고 있다면
이 참조를 클라이언트에서 접근가능하다면 클래스내부의 변수가 바뀔 수 있음
이는 되게 위험함

그래서 매개변수로 참조변수를 받아오는 경우 받자마자 방어적 복사본을 만든다
대단한 건 아니고 매개변수와 같은 참조변수를 새로 할당 (new),
 이 과정에서 비용이 많이 들수도있음 (해당 매개변수가 아주 큰값이면) 
 그리고 나서 매개변수의 유효성을 판단한다.
 보통은 유효성을 판단하고 복사본을 만드는게 더 make sense 하다고 생각하겠지만,
 멀티스레딩 환경에서는 유효성을 판단하고 복사본을 만들려는 그 찰나에 
 해당 매개변수값이 변경될 수도 있다. 
 이를 예방하기 위해 먼저 복사본을 만든다.
 (이를 이용한 공격을 TOCTOU 공격이라고 한다. time of check, time of use )

getter도 방어적 복사본을 만든다.(참조변수를 리턴하는 접근자)
클래스가 가지고 있는 참조변수를 그대로 리턴하면 참조값이 노출된다.
이는 클라이언트에서 직접 제어가 가능할 수 있다.


정적 팩터리 메서드
private 생성자 만들고
static 메소드로 생성 관리

