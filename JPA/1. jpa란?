왜 jpa 를 사용해야 하는가?

객체 지향 언어와 관계형 데이터 베이스

SQL 의존적인 코드가 되어버림
-> 문제점 : 무한 반복, 지루한 코드 CRUD
회원에 컬럼을 바꾼다면 자바객체도 바꾸고, 디비 테이블 컬럼도 바꾸고,
SQL CRUD 쿼리도 바꾸어야함. 바꿀 곳이 너무나도 많음 -> 실수 생김

객체지향과 관계형 데이터베이스의 패러다임이 너무나도 다름

상속? 어캐 표현할건데
그나마 비슷한거 table 슈퍼타입 서브타입 관계가 있음
근데 그러면 sql 쿼리를 두번 나누어야함. 슈퍼타입에 한번 서브타입에 한번
근데 조회는 어떻하냐? Join 사용해야함

 
연관관계는?
자바에서 객체는 자신이 가지고 있는 필드를 참조를 사용해 접근 ex) member.getTeam().  -> 한방향 (팀에서 member 참조값이 없음)
RDB 테이블은 외래키로 사용 ex) JOIN ON M.TEAM_ID = T.TEAM_ID -> 두방향 (외래키 TEAM에서 MEMBER의 ID(기본키값)을 가지고 있어서 조회 가능

엔티티 신뢰문제 

결론 : 계층 분할이 쉽지않음

비교할때도 new member해서 계속 생성해서 == 비교안됌
자바 컬렉션에서는 list.get(memberID) 한 결과값은 같다. 같은 참조값이기 때문에.


Jpa 에서는
지연로딩 : 신뢰 가능
== 비교가능
자바 컬렉션과 거의 비슷하다고 생각하면됨

성능? 떨어지지 않을까?
중간 매개체 를 사용할때는 버퍼와 캐싱을 사용할 수 있음(cpu, 메모리 처럼)
Jpa를 사용하면 오히려 순수 sql보다 성능을 끌여올릴수 있다.

String memberId  = "100";
Member m1 = jpa.find(Member.class, memberId); //SQL
Member m2 = jpa.find(Mebber.class, memberId); //캐시


이 경우에는 트랜잭션단위로 캐싱하기 때문에 한 유저한테 한 요청이들어오면 트랜잭션 종료 후 삭제됨.(굉장히 짧은 시간에서 캐싱이다 -> 크게 도움 안됨)
Db isolation 레벨을 한단계 내려도됨. =>이건 좀 어려운 개념, DB에 대해서 더 알아보자.

m1==m2인것을 확인할 수 도 있음


transaction.begin();

em.persist(memberA);
em.persist(memberB);
em.persist(memberC);

transaction.commit(); // 이때 sql insert 쿼리가 날라감  //flush()도 사용가능

여러개의 쿼리를 한번에 보내려면 원래 jdbc batch(일괄처리)를 사용해야되지만 jpa 에서는 옵션만 키면 한번에 보낼 수 있다.

지연로딩vs 즉시로딩
Member안에 team 이라는 객체가 존재할때 이 둘이 talbe 에서는 외래키관계이다.
따라서 member를 로딩할때 team이라는 정보가 필요하면 따로 또 로딩을 해줘야하는데
이 시점에 따라 차이가 있다.
지연로딩은 team 객체가 필요없을 때를 대비하여 getTeam() 을 할 때 비로소 쿼리를 날려서 데이터베이스에서 가져오는 작업이고,
즉시로딩은 member를 조회할때 항상 team 정보가 필요하더라 하면 첨 부터 member 로딩해올때 같이 로딩해 오는 작업이다.



