프록시를 왜 써야할까?
지연로딩과 즉시로딩을 사용하기 위해서

프록시 특징
실제 객체의 참조를 보관(target) 
객체 변수 = em.getReference() 호출하면 실제 객체의 프록시 객체를 리턴해준다.
만약 프록시객체가 처음 생성 되었다면, 변수.get속성() 시에 target에서는 null값을 가지기 때문에
영속성 컨텍스트에 초기화를 요청을 하게되고, 영속성 컨텍스트에서는 다시 디비에 해당 값을 조회해서 객체를 가져온다. 그 객체의 참조값을 프록시 객체의 타겟변수에 할당 시켜준다.

em.getReference는 원본 엔티티를 상속받은 다른 객체이므로 원본객체와 타입 비교를 할때 주의해야한다.
== 비교 불가. instance of로 비교해야함

jpa에서 타입비교할때 왠만하면 == 보단 instance of를 사용하자

jpa  


org.hibernate.LazyInitializationException : 영속성 컨텍스트 준영속상태(em 이 close 되거나, 해당 객체가 준영속상태) 일 때 프록시 객체를 초기화 요청을 해서 일어나는 오류


지연 로딩 vs  즉시로딩

-지연로딩 : 프록시로 가져온다

-즉시로딩 : 실무에서 안쓰는게 좋음 
	즉시로딩을 사용하다보면 예상치 못한 오류를 만날 수 있다.
	JPQL N+1문제를 일으킨다. Member 객체에 Team 객체가 EAGER(즉시 로딩) 설정 되어 있다면
	Select * from Member; 하게되면 , 모든 Member 객체를 가져오는 쿼리 1개 + 
	각각 객체의 Team 객체를 조회해서 가져오는 SELECT * FROM TEAM where TEAM_ID = m.TEAM_ID;
	가 member객체 개수만큼 생성됨.

member , team 가져올때는 Fetch join을 사용하는 것이 좋음


cascade 영속성 전이
이 parent만이 해당 child들을 관리 할 때 유용하게 사용된다.(단일 엔티티에 완전히 종속적일때는 사용해도 무방하다)
다른 parent들도 관리 할때는 안쓰는 것이 좋음.

단지 persist해서 영속성 저장하는 것을 parent, child들을 따로따로 해주기 귀찮아서 사용하는 것.
다른 의미는 가지고 있지 않다. 

고아 객체
@OneToMany, 속성 중 orphanRemoval = true 해주면
리스트에서 해당 child가 빠질 때 디비에서도 삭제됌 
(컬렉션에서 제거된 자식 엔티티를 자동으로 삭제한다.)

부모 엔티티가 삭제되면 자식 엔티티 모두가 삭제됨(마치 CascadeType.REMOVE 처럼 작동된다)

 
