엔티티 매핑 에노테이션 

- @Entity
- @Table
- @Column 
- @Id : primary key로 설정할 변수
- @ManyToOne
- @OneToMany
- @JoinColumn


@Entity : JPA에서 사용할 클래스 지정하는 어노테이션, 
               ,파라미터없는 기본생성자 필수 ex)public className(); protected className()
               ,final 클래스, enum, interface, inner 클래스는 불가

속성 (name = “”) : 다른 패키지에 같은 클래스 이름이 있을 때 둘을 구분하기 위해 이름을 변경할 때 사용한다.


JPA는 어플리케이션 로딩 시점에 데이터베이스 스키마 자동생성 지원. (DDL)
이 기능은 개발 시 로컬 db에서만 사용해야함

hbm2ddl.auto 속성 중
Create, create-drop, update는 운용 장비에서는 절대 사용하지 말자


개발 초기단계 : create , update
테스트 서버 : update , validate
스테이징, 운영서버 : validate, none —> 안쓰는게 젤 좋음


매핑 어노테이션
@Column 컬럼매핑 : 칼럼에 대한 설정을 할 수 있음 (name을 이용하여 데이터베이스 칼럼이름을 명시 해줄수도 있음 , 보통 변수명과 데이터베이스 속성명이 다를 때 사용)
@Temporal 날짜 타입 매핑 —> 이 안에는 DATE, TIME, TIMESTAMP 가 있다
@Enumerated -> enum 타입 매핑
@Lob ->CLOB, BLOB 매핑 (varchar 보다 더 크고 긴거할때 사용)
@Transient -> 특정 필드를 데이터베이스 컬럼 매핑시 제외 하고 싶을 때 사용 (메모리에서만 사용할때)


@Column 속성

insertable : 등록할 때 db 반영 할껏인지
updatable :  변경될때 db 반영 할 것인지

nullable : not null 제약조건 (false 시 널 불가라는 뜻이므로 not null이 붙은 DDL이 생성된다)
unique : 유니크 제약조건 트루 ( 근데 잘 안씀 이름이 못알아보게 생겨서 )
-> table 에서 유니크 제약조건을 걸어버림

length : 문자길이 제약 조건, String 타입에만 사용가능 , 기본값 255
columnDefinition =“varchar(100) default=“내맘대로 정의” , 컬럼 정보를 직접 타이핑 가능

precision, scale => BigDecimal (아주 큰 숫자나, 소수점 사용시) precision은 소수점 포함 자리수 결정,
scale 은 소수의 자리수 —> double ,float은 안됨


@Enumerated
-EnumType.ORDINAL
-EnumType.STRING ==> 거의 이것만 사용
기본 속성은 ordinal  인데 이것은 enum 순서를 숫자로 저장하기 때문에 enum이 변경되면
그 순서 무결성이 깨질 수 있음

@Temporal
Date 타입을 쓸때만 사용하는 어노테이션
요즘은 LocalDate와 LocalDateTime을 주로 사용하는데 이것들은 어노테이션이 필요없이 잘 변환됨

@Lob
지정 속성이없다
필드 타입이 문자면 CLOB, 나머지(byte 등)는 BLOB 으로 매핑




